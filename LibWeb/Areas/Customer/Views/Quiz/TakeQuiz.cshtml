@model SmartTutor.Models.ViewModels.QuizViewModel

<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="answerToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toastTitle">Answer Feedback</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage"></div>
    </div>
</div>

<div class="card shadow border-0 my-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">@Model.Quiz.Title</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <div class="quiz-container">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <span class="badge bg-primary fs-6">Question <span id="questionCounter">1</span>/@Model.Quiz.Questions.Count</span>
                <span class="badge bg-info fs-6">Time: <span id="quizTimer">00:00</span></span>
            </div>

            <form id="quizForm" method="post" asp-action="SubmitQuiz">
                <input type="hidden" name="QuizId" value="@Model.Quiz.Id" />
                <input type="hidden" id="timeTaken" name="TimeTaken" value="0" />
                <input type="hidden" id="tabSwitches" name="TabSwitches" value="0" />

                <div id="questionsContainer">
                @foreach (var question in Model.Quiz.Questions)
                {
                    <div class="question-container mb-4" data-question-id="@question.Id">
                        <h3 class="question">@question.Text</h3>
                        <div class="options">
                            @foreach (var answer in question.Answers)
                            {
                                <div class="form-check p-3 mb-2 bg-light rounded option">
                                    <input class="form-check-input" type="radio"
                                           name="SelectedAnswers[@question.Id]"
                                           value="@answer.Id"
                                           id="answer-@answer.Id" required>
                                    <label class="form-check-label w-100" for="answer-@answer.Id">
                                        @answer.Text
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                }
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-outline-secondary" id="prevQuestion" disabled>Previous</button>
                    <button type="button" class="btn btn-outline-primary" id="nextQuestion">Next</button>
                </div>

                <div class="d-grid gap-2 mt-2">
                    <button type="submit" class="btn btn-primary py-2" id="submitQuiz" style="display: none;">
                        Submit Quiz
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Question navigation
        let currentQuestion = 0;
        const questions = $('.question-container');
        const totalQuestions = questions.length;

        function showQuestion(index) {
            questions.hide().eq(index).show();
            $('#questionCounter').text(index + 1);

            // Update navigation buttons
            $('#prevQuestion').prop('disabled', index === 0);
            $('#nextQuestion').prop('disabled', index === totalQuestions - 1);

            // Show submit button only on last question
            $('#submitQuiz').toggle(index === totalQuestions - 1);
        }

        // Function to show feedback toast
        function showFeedbackToast(isCorrect, message) {
            const toast = new bootstrap.Toast(document.getElementById('answerToast'));
            const toastTitle = document.getElementById('toastTitle');
            const toastMessage = document.getElementById('toastMessage');
            
            if (isCorrect) {
                toastTitle.textContent = 'Correct!';
                toastTitle.className = 'me-auto text-success';
                toastMessage.className = 'toast-body text-success';
            } else {
                toastTitle.textContent = 'Incorrect';
                toastTitle.className = 'me-auto text-danger';
                toastMessage.className = 'toast-body text-danger';
            }
            
            toastMessage.textContent = message;
            toast.show();
        }

        // Initial setup
        showQuestion(0);

        // Navigation handlers
        $('#nextQuestion').click(function () {
            if (currentQuestion < totalQuestions - 1) {
                currentQuestion++;
                showQuestion(currentQuestion);

                // Get the quiz and question ID
                let quizId = $('input[name="QuizId"]').val();
                let questionId = questions.eq(currentQuestion).data('question-id');

                // Check if the user already answered this question
                $.get(`/Customer/Quiz/GetUserAnswer?quizId=${quizId}&questionId=${questionId}`, function (data) {
                    if (data.answerId !== 0) {
                        $(`#answer-${data.answerId}`).prop('checked', true);
                    }
                });
            }
            
            // Clear any answer feedback when changing questions
            $('.correct-answer, .incorrect-answer, .correct-answer-highlight')
                .removeClass('correct-answer incorrect-answer correct-answer-highlight');
        });

        $('#prevQuestion').click(function () {
            if (currentQuestion > 0) {
                currentQuestion--;
                showQuestion(currentQuestion);
            }
            
            // Clear any answer feedback when changing questions
            $('.correct-answer, .incorrect-answer, .correct-answer-highlight')
                .removeClass('correct-answer incorrect-answer correct-answer-highlight');
        });

        // Track time and tab switches
        let startTime = new Date();
        let tabSwitches = 0;
        
        // Update timer every second
        setInterval(function() {
            let now = new Date();
            let seconds = Math.floor((now - startTime) / 1000);
            $('#timeTaken').val(seconds);
            
            let minutes = Math.floor(seconds / 60);
            seconds = seconds % 60;
            $('#quizTimer').text(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);
        }, 1000);

        // Track tab switches
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                tabSwitches++;
                $('#tabSwitches').val(tabSwitches);
            }
        });

        // Form validation
        $('#quizForm').submit(function(e) {
            let unanswered = $('.question-container').filter(function() {
                return $(this).find('input[type="radio"]:checked').length === 0;
            }).length;
            
            if (unanswered > 0) {
                e.preventDefault();
                alert(`Please answer all questions. You have ${unanswered} unanswered questions.`);
            }
        });

        let submittedAnswers = {};

        // Handle answer selection with instant feedback
        $('.option').click(function () {
            let answerId = $(this).find('input[type="radio"]').val();
            let quizId = $('input[name="QuizId"]').val();
            let questionId = $(this).closest('.question-container').data('question-id');
            let $option = $(this);

            // Prevent duplicate submission for the same question
            if (submittedAnswers[questionId] === answerId) {
                return;
            }
            submittedAnswers[questionId] = answerId;

            $.post('/Customer/Quiz/SaveUserAnswer', { quizId, questionId, answerId }, function (response) {
                // Visual feedback
                if (response.isCorrect) {
                    $option.addClass('correct-answer').removeClass('incorrect-answer');
                    showFeedbackToast(true, 'Great job! That answer is correct.');
                } else {
                    $option.addClass('incorrect-answer').removeClass('correct-answer');
                    showFeedbackToast(false, 'That answer is incorrect. Please try again.');
                    
                    // Highlight the correct answer if available
                    if (response.correctAnswerId) {
                        $(`#answer-${response.correctAnswerId}`).closest('.option')
                            .addClass('correct-answer-highlight');
                    }
                }

                $option.find('input[type="radio"]').prop('checked', true);
                $option.addClass('selected').siblings().removeClass('selected');
            });
        });
    </script>

    <style>
        .question-container {
            display: none;
        }
        .question-container:first-child {
            display: block;
        }
        .option {
            cursor: pointer;
            transition: all 0.2s;
        }
        .option:hover {
            background-color: #e9ecef !important;
        }
        .form-check-input:checked + .form-check-label {
            font-weight: bold;
        }
        .form-check-input:checked ~ .form-check-label {
            font-weight: bold;
            color: #0d6efd;
        }
        .option.selected {
            background-color: #e7f1ff !important;
            border-left: 3px solid #0d6efd;
        }
        /* Feedback styles */
        .correct-answer {
            background-color: #d1e7dd !important;
            border-left: 3px solid #198754 !important;
        }
        .incorrect-answer {
            background-color: #f8d7da !important;
            border-left: 3px solid #dc3545 !important;
        }
        .correct-answer-highlight {
            background-color: #d1e7dd !important;
            border-left: 3px solid #198754 !important;
            animation: pulse 1.5s infinite;
        }
        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
        }
    </style>
}