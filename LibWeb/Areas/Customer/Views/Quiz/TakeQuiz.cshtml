@model SmartTutor.Models.ViewModels.QuizViewModel

<div class="card shadow border-0 my-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">@Model.Title</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <div class="quiz-container">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <span class="badge bg-primary fs-6">Question <span id="questionCounter">1</span>/10</span>
                <span class="badge bg-info fs-6">Time: <span id="quizTimer">00:00</span></span>
                <span class="badge bg-warning fs-6">Tab Switches: <span id="tabSwitchCounter">0</span></span>
                <span class="badge bg-secondary fs-6">Difficulty: <span id="questionDifficulty">@Model.CurrentQuestion?.Difficulty</span></span>
            </div>

            <form id="quizForm" method="post" asp-action="SubmitQuiz">
                <input type="hidden" name="QuizId" value="@Model.QuizId" />
                <input type="hidden" id="timeTaken" name="TimeTaken" value="0" />
                <input type="hidden" id="tabSwitches" name="TabSwitches" value="0" />

                <div id="questionsContainer">
                    @if (Model.CurrentQuestion != null)
                    {
                        <div class="question-container mb-4" data-question-id="@Model.CurrentQuestion.Id">
                            <h3 class="question">@Model.CurrentQuestion.Text</h3>
                            <div class="options">
                                @foreach (var answer in Model.CurrentQuestion.Answers)
                                {
                                    <div class="form-check p-3 mb-2 bg-light rounded option">
                                        <input class="form-check-input" type="radio"
                                               name="SelectedAnswers[@Model.CurrentQuestion.Id]"
                                               value="@answer.Id"
                                               id="answer-@answer.Id" required>
                                        <label class="form-check-label w-100" for="answer-@answer.Id">
                                            @answer.Text
                                        </label>
                                    </div>
                                }
                            </div>
                            <div class="feedback-container mt-4">
                                <div class="feedback-box p-4 rounded" style="display: none;">
                                    <h5 class="feedback-title mb-3"></h5>
                                    <div class="feedback-content fs-5 lh-base"></div>
                                    <div class="feedback-resources mt-3">
                                        <h6>Learn more:</h6>
                                        <ul class="resources-list"></ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-outline-secondary" id="prevQuestion" disabled>Previous</button>
                    <button type="button" class="btn btn-outline-primary" id="nextQuestion">Next</button>
                </div>

                <div class="d-grid gap-2 mt-2">
                    <button type="submit" class="btn btn-primary py-2" id="submitQuiz" style="display: none;">
                        Submit Quiz
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentQuestion = 0;
        let questions = [];
        let startTime = new Date();
        let tabSwitches = 0;
        let questionStartTime = new Date();
        let submittedAnswers = {};

        // Initialize with first question
        $(document).ready(function() {
            questions.push(@Html.Raw(Json.Serialize(Model.CurrentQuestion)));
            updateQuestionCounter();
            updateDifficulty();
        });

        function updateQuestionCounter() {
            $('#questionCounter').text(currentQuestion + 1);
        }

        function updateDifficulty() {
            $('#questionDifficulty').text(questions[currentQuestion]?.difficulty || '');
        }

        function showQuestion(index) {
            console.log('Showing question:', questions[index]);
            const question = questions[index];
            const $container = $('#questionsContainer');
            
            let answersHtml = '';
            if (question.answers && question.answers.length > 0) {
                answersHtml = question.answers.map(answer => `
                    <div class="form-check p-3 mb-2 bg-light rounded option">
                        <input class="form-check-input" type="radio"
                               name="SelectedAnswers[${question.id}]"
                               value="${answer.id}"
                               id="answer-${answer.id}" required>
                        <label class="form-check-label w-100" for="answer-${answer.id}">
                            ${answer.text}
                        </label>
                    </div>
                `).join('');
            } else {
                answersHtml = '<div class="alert alert-warning">No answers available for this question.</div>';
            }
            
            $container.html(`
                <div class="question-container mb-4" data-question-id="${question.id}">
                    <h3 class="question">${question.text}</h3>
                    <div class="options">
                        ${answersHtml}
                    </div>
                    <div class="feedback-container mt-4">
                        <div class="feedback-box p-4 rounded" style="display: none;">
                            <h5 class="feedback-title mb-3"></h5>
                            <div class="feedback-content fs-5 lh-base"></div>
                            <div class="feedback-resources mt-3">
                                <h6>Learn more:</h6>
                                <ul class="resources-list"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            `);

            // Reset tab switches for new question
            tabSwitches = 0;
            $('#tabSwitches').val(0);
            $('#tabSwitchCounter').text('0');

            updateQuestionCounter();
            updateDifficulty();
            questionStartTime = new Date();
            
            // Re-enable radio buttons
            $('input[type="radio"]').prop('disabled', false);
        }

        // Handle answer selection with instant feedback
        $(document).on('change', 'input[type="radio"]', function() {
            let answerId = $(this).val();
            let quizId = $('input[name="QuizId"]').val();
            let questionId = $(this).closest('.question-container').data('question-id');
            let $option = $(this).closest('.option');
            let $questionContainer = $(this).closest('.question-container');
            let $feedbackBox = $questionContainer.find('.feedback-box');
            let $feedbackContent = $questionContainer.find('.feedback-content');
            let $resourcesList = $questionContainer.find('.resources-list');

            // Calculate response time for this question
            let responseTime = (new Date() - questionStartTime) / 1000;

            // Prevent duplicate submission for the same question
            if (submittedAnswers[questionId] === answerId) {
                return;
            }
            submittedAnswers[questionId] = answerId;

            console.log('Sending answer:', {
                quizId: quizId,
                questionId: questionId,
                answerId: answerId,
                responseTime: responseTime,
                tabSwitches: tabSwitches
            });

            // Disable the radio buttons while processing
            $('input[type="radio"]').prop('disabled', true);

            $.ajax({
                url: '/Customer/Quiz/SaveUserAnswer',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/x-www-form-urlencoded',
                data: {
                    quizId: quizId,
                    questionId: questionId,
                    answerId: answerId,
                    responseTime: responseTime,
                    tabSwitches: tabSwitches
                },
                success: function(response) {
                    console.log('Server response:', response);
                    
                    // Re-enable the radio buttons
                    $('input[type="radio"]').prop('disabled', false);

                    if (response.success) {
                        // Extract and remove the "Learn more" section from the explanation
                        let explanation = response.explanation;
                        let learnMoreIndex = explanation.indexOf("Learn more:");
                        let learnMoreText = "";

                        if (learnMoreIndex !== -1) {
                            learnMoreText = explanation.substring(learnMoreIndex);
                            explanation = explanation.substring(0, learnMoreIndex).trim();
                        }

                        // Clear old resources
                        $resourcesList.empty();

                        // Visual feedback
                        if (response.isCorrect) {
                            $option.addClass('correct-answer').removeClass('incorrect-answer');
                            $feedbackBox.css('background-color', '#d1e7dd')
                                .css('border-left', '4px solid #198754')
                                .show();
                            $feedbackContent.html(`
                                <div class="correct-explanation">
                                    <i class="fas fa-check-circle me-2"></i>
                                    ${explanation}
                                </div>
                            `);
                        } else {
                            $option.addClass('incorrect-answer').removeClass('correct-answer');
                            $feedbackBox.css('background-color', '#f8d7da')
                                .css('border-left', '4px solid #dc3545')
                                .show();
                            $feedbackContent.html(`
                                <div class="incorrect-explanation">
                                    <i class="fas fa-times-circle me-2"></i>
                                    ${explanation}
                                </div>
                            `);
                        }

                        // Extract links from "Learn more" section and add them to resources
                        let urlRegex = /(https?:\/\/[^\s]+)/g;
                        let links = learnMoreText.match(urlRegex);

                        if (links) {
                            links.forEach(link => {
                                $resourcesList.append(`<li><a href="${link}" target="_blank">${link}</a></li>`);
                            });
                        }

                        // If we have a next question and haven't reached 10 questions yet
                        if (response.nextQuestion && questions.length < 10) {
                            console.log('Adding next question:', response.nextQuestion);
                            questions.push(response.nextQuestion);
                            // Enable the next button
                            $('#nextQuestion').prop('disabled', false);
                        } else if (questions.length >= 10) {
                            $('#submitQuiz').show();
                            $('#nextQuestion').hide();
                        }
                    } else {
                        console.error('Server returned error:', response.message);
                    }
                },
                error: function(xhr, status, error) {
                    // Re-enable the radio buttons
                    $('input[type="radio"]').prop('disabled', false);

                    console.error('Error details:', {
                        status: status,
                        error: error,
                        response: xhr.responseText
                    });
                }
            });
        });

        // Navigation handlers
        $('#nextQuestion').click(function () {
            if (currentQuestion < questions.length - 1) {
                currentQuestion++;
                showQuestion(currentQuestion);
                // Disable the next button until an answer is selected
                $(this).prop('disabled', true);
            }
        });

        $('#prevQuestion').click(function () {
            if (currentQuestion > 0) {
                currentQuestion--;
                showQuestion(currentQuestion);
                // Enable the next button if we're not at the last question
                $('#nextQuestion').prop('disabled', currentQuestion >= questions.length - 1);
            }
        });

        // Update timer every second
        setInterval(function () {
            let now = new Date();
            let seconds = Math.floor((now - startTime) / 1000);
            $('#timeTaken').val(seconds);

            let minutes = Math.floor(seconds / 60);
            seconds = seconds % 60;
            $('#quizTimer').text(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);
        }, 1000);

        // Track tab switches
        document.addEventListener('visibilitychange', function () {
            if (document.hidden) {
                tabSwitches++;
                $('#tabSwitches').val(tabSwitches);
                $('#tabSwitchCounter').text(tabSwitches);
            }
        });

        // Form validation
        $('#quizForm').submit(function (e) {
            let unanswered = $('.question-container').filter(function () {
                return $(this).find('input[type="radio"]:checked').length === 0;
            }).length;

            if (unanswered > 0) {
                e.preventDefault();
                alert(`Please answer all questions. You have ${unanswered} unanswered questions.`);
            }
        });
    </script>

    <style>
        .question-container {
            display: block;
        }

        .option {
            cursor: pointer;
            transition: all 0.2s;
        }

        .option:hover {
            background-color: #e9ecef !important;
        }

        .form-check-input:checked + .form-check-label {
            font-weight: bold;
        }

        .form-check-input:checked ~ .form-check-label {
            font-weight: bold;
            color: #0d6efd;
        }

        .option.selected {
            background-color: #e7f1ff !important;
            border-left: 3px solid #0d6efd;
        }

        .correct-answer {
            background-color: #d1e7dd !important;
            border-left: 3px solid #198754 !important;
        }

        .incorrect-answer {
            background-color: #f8d7da !important;
            border-left: 3px solid #dc3545 !important;
        }

        .correct-answer-highlight {
            background-color: #d1e7dd !important;
            border-left: 3px solid #198754 !important;
            animation: pulse 1.5s infinite;
        }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .feedback-box {
            background-color: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-top: 1rem;
            padding: 1.5rem;
        }

        .feedback-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .feedback-content {
            font-size: 1.1rem;
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .correct-explanation {
            color: #0f5132;
            font-weight: 500;
        }

        .incorrect-explanation {
            color: #842029;
            font-weight: 500;
        }

        .feedback-resources {
            background-color: rgba(0,0,0,0.03);
            border-radius: 6px;
            padding: 0.75rem;
        }

        .feedback-resources h6 {
            font-size: 1rem;
            margin-bottom: 0.5rem;
        }

        .resources-list {
            padding-left: 1.5rem;
            margin-bottom: 0;
        }
    </style>
}